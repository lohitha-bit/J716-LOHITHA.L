-- 1. Retrieve a list of all orders along with customer details for each order
SELECT o.OrderID, c.FirstName, c.LastName, c.Email, c.Phone, o.OrderDate, o.TotalAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID;

-- 2. Find the total revenue generated by each electronic gadget product
SELECT p.ProductName, SUM(od.Quantity * p.Price) AS TotalRevenue
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductName;

-- 3. List all customers who have made at least one purchase, including their name and contact details
SELECT DISTINCT c.CustomerID, c.FirstName, c.LastName, c.Email, c.Phone
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID;

-- 4. Find the most popular electronic gadget (highest total quantity ordered)
SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantityOrdered
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductName
ORDER BY TotalQuantityOrdered DESC
LIMIT 1;

-- 5. Retrieve a list of electronic gadgets along with their corresponding descriptions
SELECT ProductID, ProductName, Description
FROM Products;

-- 6. Calculate the average order value for each customer, including the customer's name
SELECT c.CustomerID, c.FirstName, c.LastName, AVG(o.TotalAmount) AS AverageOrderValue
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName;

-- 7. Find the order with the highest total revenue, including order ID, customer info, and revenue
SELECT o.OrderID, c.FirstName, c.LastName, c.Email, SUM(od.Quantity * p.Price) AS TotalRevenue
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY o.OrderID, c.FirstName, c.LastName, c.Email
ORDER BY TotalRevenue DESC
LIMIT 1;

-- 8. List electronic gadgets and the number of times each product has been ordered
SELECT p.ProductName, COUNT(od.OrderID) AS TotalOrders
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductName
ORDER BY TotalOrders DESC;

-- 9. Find customers who have purchased a specific electronic gadget (dynamic input for product name)
DELIMITER //

CREATE PROCEDURE GetCustomersByProduct(IN productName VARCHAR(100))
BEGIN
    SELECT DISTINCT c.CustomerID, c.FirstName, c.LastName, c.Email, c.Phone
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    JOIN OrderDetails od ON o.OrderID = od.OrderID
    JOIN Products p ON od.ProductID = p.ProductID
    WHERE p.ProductName = productName;
END //

DELIMITER ;
CALL GetCustomersByProduct('Laptop');

-- 10. Calculate the total revenue for all orders placed within a specific time period (dynamic input for dates)

DELIMITER //

CREATE PROCEDURE GetRevenueByDateRange(IN startDate DATE, IN endDate DATE)
BEGIN
    SELECT SUM(TotalAmount) AS TotalRevenue
    FROM Orders
    WHERE OrderDate BETWEEN startDate AND endDate;
END //

DELIMITER ;
CALL GetRevenueByDateRange('2025-03-20', '2025-03-23');

